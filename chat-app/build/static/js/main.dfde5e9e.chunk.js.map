{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","GroupChatRoom","dummy","useRef","messagesRef","collection","doc","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAaAA,IAASC,cAAc,CAEnBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,8CAIX,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAuB3B,SAASC,IAOP,OACE,qCACE,wBAAQC,UAAU,UAAUC,QAPP,WACvB,IAAMC,EAAW,IAAId,IAASS,KAAKM,mBACnCN,EAAKO,gBAAgBF,IAKnB,iCACA,2GAMN,SAASG,IACP,OAAOR,EAAKS,aACV,wBAAQN,UAAU,WAAWC,QAAS,kBAAMJ,EAAKU,WAAjD,sBAkEJ,SAASC,IAEP,IAAMC,EAAQC,mBACRC,EAAcb,EAAUc,WAAW,YAAYC,IAAI,SAASD,WAAW,QACvEE,EAAQH,EAAYI,QAAQ,aAAaC,MAAM,IAJ9B,EAMJC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EANgB,sBAQWC,mBAAS,IARpB,mBAQhBC,EARgB,KAQLC,EARK,KAWjBC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQ7B,EAAKS,YAAvBqB,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZjB,EAAYkB,IAAI,CACpBC,KAAMT,EACNU,UAAW3C,IAASU,UAAUkC,WAAWC,kBACzCN,MACAC,aATgB,OAYlBN,EAAa,IACbb,EAAMyB,QAAQC,eAAe,CAAEC,SAAU,WAbvB,2CAAH,sDAiBjB,OAAQ,qCACN,iCAEGjB,GAAYA,EAASkB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAGvD,sBAAMC,IAAKjC,OAIb,uBAAMkC,SAAUpB,EAAhB,UAEE,uBAAOqB,MAAOvB,EAAWwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,QAAQG,YAAY,uBAEpF,wBAAQC,KAAK,SAASC,UAAW5B,EAAjC,sCAQN,SAASkB,EAAYW,GAAQ,IAAD,EACMA,EAAMV,QAA9BV,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SAGbuB,EAAexB,IAAQ9B,EAAKS,YAAYqB,IAAM,OAAS,WAE7D,OAAQ,mCACN,sBAAK3B,UAAS,kBAAamD,GAA3B,UACE,qBAAKC,IAAKxB,GAAY,0DACtB,4BAAIE,SAMKuB,MAzKf,WAAgB,IAAD,EAEEC,YAAazD,GAArB0D,EAFM,oBAIb,OACE,sBAAKvD,UAAU,MAAf,UACE,mCACE,sEACA,cAACK,EAAD,OAGF,kCACGkD,EAAO,cAAC/C,EAAD,IAAoB,cAACT,EAAD,UC7BrByD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dfde5e9e.chunk.js","sourcesContent":["// Based on tutorial at https://fireship.io/lessons/react-firebase-chat-app-tutorial/\n// The tutorial also includes filtering bad words and banning users for swearing, which is not included here.\n\nimport React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n    // This data is copied from adding a web app to Firebase, in the project settings\n    apiKey: \"AIzaSyBJhcglS9-i0liZophzKEToRMe8FiODIOk\",\n    authDomain: \"chat-tutorial-5692d.firebaseapp.com\",\n    databaseURL: \"https://chat-tutorial-5692d.firebaseio.com\",\n    projectId: \"chat-tutorial-5692d\",\n    storageBucket: \"chat-tutorial-5692d.appspot.com\",\n    messagingSenderId: \"441905797006\",\n    appId: \"1:441905797006:web:274684d28efcc58c8336df\"\n\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <GroupChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\n//TODO we don't just want to sign in with Google, we want to have our own signup.\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\n      <p>Do not violate the community guidelines or you will be banned for life!</p>\n    </>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\n\n// Tips from here: https://edisondevadoss.medium.com/react-native-chat-using-firebase-d4c0ef1ab0b5 \nfunction PrivateChat() {\n\n    const { uid, photoURL } = auth.currentUser;\n    \n    // Merge two user IDs and create a new chat ID\n    const chatID = () => {\n        const uid1 = uid; \n        const uid2 = uid; // TODO how to get other user's ID?\n        const chatIDpre = [];\n        chatIDpre.push(uid1);\n        chatIDpre.push(uid2);\n        chatIDpre.sort();\n        return chatIDpre.join('_');\n    };\n    \n    const dummy = useRef(); // for scrolling to bottom\n    \n    // Get messages\n    const messagesRef = firestore.collection('messages').doc(chatID.call()).collection('chat');\n    const query = messagesRef.orderBy('createdAt');\n    const [messages] = useCollectionData(query, { idField: 'id' });\n\n    const [formValue, setFormValue] = useState('');\n    \n    // Send messages\n    const sendMessage = async (e) => {\n        e.preventDefault();\n\n        await messagesRef.add({\n          text: formValue,\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n          uid,\n          photoURL\n        })\n\n        setFormValue('');\n        dummy.current.scrollIntoView({ behavior: 'smooth' }); //for scrolling to bottom\n    }\n  \n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      {/*Adding this empty dummy makes it so it scrolls to the bottom when there are new messages -->*/}\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n      <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\n\n    </form>\n  </>)\n}\n\nfunction GroupChatRoom() {\n\n  const dummy = useRef(); // for scrolling to bottom\n  const messagesRef = firestore.collection('messages').doc('group').collection('chat');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' }); //for scrolling to bottom\n  }\n  \n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      {/*Adding this empty dummy makes it so it scrolls to the bottom when there are new messages -->*/}\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n      <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\n\n    </form>\n  </>)\n}\n\n\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  // Here we set it up so we can apply different styling based on whether the message is sent or received\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\n\nexport default App;\n\n/* Note: Also edited the \"Rules\" in Firebase like so:\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /{document=**} {\n      allow read, write: if\n          request.time < timestamp.date(2020, 12, 19);\n    }\n    \n    match /messages/{docId}{\n    \tallow read: if request.auth.uid != null;\n      allow create: if canCreateMessage();\n    }\n    \n    function canCreateMessage(){\n    \tlet isSignedIn = request.auth.uid != null;\n      let isOwner = request.auth.uid == request.resource.data.uid;\n      \n      return isSignedIn && isOwner;\n    }\n  }\n}\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}