{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kalina/Desktop/school/cs598kgk/chat-tutorial/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n// Based on tutorial at https://fireship.io/lessons/react-firebase-chat-app-tutorial/\n// The tutorial also includes filtering bad words and banning users for swearing, which is not included here.\nimport React, { useRef, useState } from 'react';\nimport './App.css';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nfirebase.initializeApp({\n  // This data is copied from adding a web app to Firebase, in the project settings\n  apiKey: \"AIzaSyBJhcglS9-i0liZophzKEToRMe8FiODIOk\",\n  authDomain: \"chat-tutorial-5692d.firebaseapp.com\",\n  databaseURL: \"https://chat-tutorial-5692d.firebaseio.com\",\n  projectId: \"chat-tutorial-5692d\",\n  storageBucket: \"chat-tutorial-5692d.appspot.com\",\n  messagingSenderId: \"441905797006\",\n  appId: \"1:441905797006:web:274684d28efcc58c8336df\"\n});\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\nfunction App() {\n  _s();\n\n  const [user] = useAuthState(auth);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u269B\\uFE0F\\uD83D\\uDD25\\uD83D\\uDCAC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SignOut, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: user ? /*#__PURE__*/_jsxDEV(PrivateChat, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(SignIn, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 35\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n} //TODO we don't want to sign in with Google, we want to have our own signup.\n\n\n_s(App, \"hP/7NvzUIXfxIpRVjMlmHSnysKo=\", false, function () {\n  return [useAuthState];\n});\n\n_c = App;\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"sign-in\",\n      onClick: signInWithGoogle,\n      children: \"Sign in with Google\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Do not violate the community guidelines or you will be banned for life!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_c2 = SignIn;\n\nfunction SignOut() {\n  return auth.currentUser && /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"sign-out\",\n    onClick: () => auth.signOut(),\n    children: \"Sign Out\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n/*function PrivateChat(){\n    // Merge two user IDs and create a new chat ID\n    chatID = () => {\n        const chatterID = this.props.authUser.uid;\n        const chateeID = this.chateeUID;\n        const chatIDpre = [];\n        chatIDpre.push(chatterID);\n        chatIDpre.push(chateeID);\n        chatIDpre.sort();\n        return chatIDpre.join('_');\n    };\n    \n    // Send a message to Firestore\n    const sendChatMessage = (chatID, chat) => {\n        return db\n        .collection('messages')\n        .doc(chatID)\n        .collection('chats')\n        .add(chat);\n    };\n    \n    // Receive the messagen from Firebase\n    const db = firebase.firestore();\n          db.collection('messages')\n            .doc(chatID)\n            .collection('chats')\n            .orderBy('createdAt', 'desc')\n            .onSnapshot(function(doc) {\n              console.log(doc.docs);         \n    });\n}*/\n// Tips from here: https://edisondevadoss.medium.com/react-native-chat-using-firebase-d4c0ef1ab0b5 \n\n\n_c3 = SignOut;\n\nfunction PrivateChat() {\n  _s2();\n\n  const dummy = useRef(); // for scrolling to bottom\n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef //.doc(chatID)\n  //.collection('chats')\n  .orderBy('createdAt'); //.onSnapshot(function(doc){\n  //    console.log(doc.docs);\n  //});\n\n  const [messages] = useCollectionData(query, {\n    idField: 'id'\n  });\n  const [formValue, setFormValue] = useState(''); // Merge two user IDs and create a new chat ID\n\n  const chatID = () => {\n    const chatterID = this.props.authUser.uid;\n    const chateeID = this.chateeUID;\n    const chatIDpre = [];\n    chatIDpre.push(chatterID);\n    chatIDpre.push(chateeID);\n    chatIDpre.sort();\n    return chatIDpre.join('_');\n  };\n  /*\n      const sendChatMessage = (chatID, chat) => {\n          return db\n          .collection('messages')\n          .doc(chatID)\n          .collection('chats')\n          .add(chat);\n      };\n  */\n\n\n  const sendMessage = async e => {\n    e.preventDefault();\n    const {\n      uid,\n      photoURL\n    } = auth.currentUser;\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    });\n    setFormValue('');\n    dummy.current.scrollIntoView({\n      behavior: 'smooth'\n    }); //for scrolling to bottom\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      children: [messages && messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        message: msg\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 40\n      }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n        ref: dummy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: formValue,\n        onChange: e => setFormValue(e.target.value),\n        placeholder: \"say something nice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !formValue,\n        children: \"\\uD83D\\uDD4A\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(PrivateChat, \"NX0eAKMykrgqWBRdNpM7iVcnAm4=\", false, function () {\n  return [useCollectionData];\n});\n\n_c4 = PrivateChat;\n\nfunction GroupChatRoom() {\n  _s3();\n\n  const dummy = useRef(); // for scrolling to bottom\n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n  const [messages] = useCollectionData(query, {\n    idField: 'id'\n  });\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async e => {\n    e.preventDefault();\n    const {\n      uid,\n      photoURL\n    } = auth.currentUser;\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    });\n    setFormValue('');\n    dummy.current.scrollIntoView({\n      behavior: 'smooth'\n    }); //for scrolling to bottom\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      children: [messages && messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        message: msg\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 40\n      }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n        ref: dummy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: formValue,\n        onChange: e => setFormValue(e.target.value),\n        placeholder: \"say something nice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !formValue,\n        children: \"\\uD83D\\uDD4A\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s3(GroupChatRoom, \"NX0eAKMykrgqWBRdNpM7iVcnAm4=\", false, function () {\n  return [useCollectionData];\n});\n\n_c5 = GroupChatRoom;\n\nfunction ChatMessage(props) {\n  const {\n    text,\n    uid,\n    photoURL\n  } = props.message; // Here we set it up so we can apply different styling based on whether the message is sent or received\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${messageClass}`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_c6 = ChatMessage;\nexport default App;\n/* Note: Also edited the \"Rules\" in Firebase like so:\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /{document=**} {\n      allow read, write: if\n          request.time < timestamp.date(2020, 12, 19);\n    }\n    \n    match /messages/{docId}{\n    \tallow read: if request.auth.uid != null;\n      allow create: if canCreateMessage();\n    }\n    \n    function canCreateMessage(){\n    \tlet isSignedIn = request.auth.uid != null;\n      let isOwner = request.auth.uid == request.resource.data.uid;\n      \n      return isSignedIn && isOwner;\n    }\n  }\n}\n*/\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"SignIn\");\n$RefreshReg$(_c3, \"SignOut\");\n$RefreshReg$(_c4, \"PrivateChat\");\n$RefreshReg$(_c5, \"GroupChatRoom\");\n$RefreshReg$(_c6, \"ChatMessage\");","map":{"version":3,"sources":["/Users/kalina/Desktop/school/cs598kgk/chat-tutorial/src/App.js"],"names":["React","useRef","useState","firebase","useAuthState","useCollectionData","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","analytics","App","user","SignIn","signInWithGoogle","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","PrivateChat","dummy","messagesRef","collection","query","orderBy","messages","idField","formValue","setFormValue","chatID","chatterID","props","authUser","uid","chateeID","chateeUID","chatIDpre","push","sort","join","sendMessage","e","preventDefault","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","id","target","value","GroupChatRoom","limit","ChatMessage","message","messageClass"],"mappings":"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","sourcesContent":["// Based on tutorial at https://fireship.io/lessons/react-firebase-chat-app-tutorial/\n// The tutorial also includes filtering bad words and banning users for swearing, which is not included here.\n\nimport React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n    // This data is copied from adding a web app to Firebase, in the project settings\n    apiKey: \"AIzaSyBJhcglS9-i0liZophzKEToRMe8FiODIOk\",\n    authDomain: \"chat-tutorial-5692d.firebaseapp.com\",\n    databaseURL: \"https://chat-tutorial-5692d.firebaseio.com\",\n    projectId: \"chat-tutorial-5692d\",\n    storageBucket: \"chat-tutorial-5692d.appspot.com\",\n    messagingSenderId: \"441905797006\",\n    appId: \"1:441905797006:web:274684d28efcc58c8336df\"\n\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>⚛️🔥💬</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <PrivateChat /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\n//TODO we don't want to sign in with Google, we want to have our own signup.\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\n      <p>Do not violate the community guidelines or you will be banned for life!</p>\n    </>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\n\n/*function PrivateChat(){\n    // Merge two user IDs and create a new chat ID\n    chatID = () => {\n        const chatterID = this.props.authUser.uid;\n        const chateeID = this.chateeUID;\n        const chatIDpre = [];\n        chatIDpre.push(chatterID);\n        chatIDpre.push(chateeID);\n        chatIDpre.sort();\n        return chatIDpre.join('_');\n    };\n    \n    // Send a message to Firestore\n    const sendChatMessage = (chatID, chat) => {\n        return db\n        .collection('messages')\n        .doc(chatID)\n        .collection('chats')\n        .add(chat);\n    };\n    \n    // Receive the messagen from Firebase\n    const db = firebase.firestore();\n          db.collection('messages')\n            .doc(chatID)\n            .collection('chats')\n            .orderBy('createdAt', 'desc')\n            .onSnapshot(function(doc) {\n              console.log(doc.docs);         \n    });\n}*/\n\n// Tips from here: https://edisondevadoss.medium.com/react-native-chat-using-firebase-d4c0ef1ab0b5 \nfunction PrivateChat() {\n\n  const dummy = useRef(); // for scrolling to bottom\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef\n                    //.doc(chatID)\n                    //.collection('chats')\n                    .orderBy('createdAt')\n                    //.onSnapshot(function(doc){\n                    //    console.log(doc.docs);\n                    //});\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n    \n    // Merge two user IDs and create a new chat ID\nconst chatID = () => {\n        const chatterID = this.props.authUser.uid;\n        const chateeID = this.chateeUID;\n        const chatIDpre = [];\n        chatIDpre.push(chatterID);\n        chatIDpre.push(chateeID);\n        chatIDpre.sort();\n        return chatIDpre.join('_');\n    };\n\n    \n/*\n    const sendChatMessage = (chatID, chat) => {\n        return db\n        .collection('messages')\n        .doc(chatID)\n        .collection('chats')\n        .add(chat);\n    };\n*/\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' }); //for scrolling to bottom\n  }\n  \n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      {/*Adding this empty dummy makes it so it scrolls to the bottom when there are new messages -->*/}\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n      <button type=\"submit\" disabled={!formValue}>🕊️</button>\n\n    </form>\n  </>)\n}\n\nfunction GroupChatRoom() {\n\n  const dummy = useRef(); // for scrolling to bottom\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' }); //for scrolling to bottom\n  }\n  \n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      {/*Adding this empty dummy makes it so it scrolls to the bottom when there are new messages -->*/}\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n      <button type=\"submit\" disabled={!formValue}>🕊️</button>\n\n    </form>\n  </>)\n}\n\n\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  // Here we set it up so we can apply different styling based on whether the message is sent or received\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\n\nexport default App;\n\n/* Note: Also edited the \"Rules\" in Firebase like so:\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /{document=**} {\n      allow read, write: if\n          request.time < timestamp.date(2020, 12, 19);\n    }\n    \n    match /messages/{docId}{\n    \tallow read: if request.auth.uid != null;\n      allow create: if canCreateMessage();\n    }\n    \n    function canCreateMessage(){\n    \tlet isSignedIn = request.auth.uid != null;\n      let isOwner = request.auth.uid == request.resource.data.uid;\n      \n      return isSignedIn && isOwner;\n    }\n  }\n}\n*/"]},"metadata":{},"sourceType":"module"}