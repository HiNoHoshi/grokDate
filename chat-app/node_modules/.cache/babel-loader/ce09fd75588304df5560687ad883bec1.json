{"ast":null,"code":"import _regeneratorRuntime from\"/Users/kalina/Desktop/school/cs598kgk/chat-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/kalina/Desktop/school/cs598kgk/chat-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/kalina/Desktop/school/cs598kgk/chat-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";// Based on tutorial at https://fireship.io/lessons/react-firebase-chat-app-tutorial/\n// The tutorial also includes filtering bad words and banning users for swearing, which is not included here.\nimport React,{useRef,useState}from'react';import'./App.css';import firebase from'firebase/app';import'firebase/firestore';import'firebase/auth';import{useAuthState}from'react-firebase-hooks/auth';import{useCollectionData}from'react-firebase-hooks/firestore';firebase.initializeApp({// This data is copied from adding a web app to Firebase, in the project settings\napiKey:\"AIzaSyBJhcglS9-i0liZophzKEToRMe8FiODIOk\",authDomain:\"chat-tutorial-5692d.firebaseapp.com\",databaseURL:\"https://chat-tutorial-5692d.firebaseio.com\",projectId:\"chat-tutorial-5692d\",storageBucket:\"chat-tutorial-5692d.appspot.com\",messagingSenderId:\"441905797006\",appId:\"1:441905797006:web:274684d28efcc58c8336df\"});var auth=firebase.auth();var firestore=firebase.firestore();function App(){var _useAuthState=useAuthState(auth),_useAuthState2=_slicedToArray(_useAuthState,1),user=_useAuthState2[0];return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"header\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u269B\\uFE0F\\uD83D\\uDD25\\uD83D\\uDCAC\"}),/*#__PURE__*/_jsx(SignOut,{})]}),/*#__PURE__*/_jsx(\"section\",{children:user?/*#__PURE__*/_jsx(GroupChatRoom,{}):/*#__PURE__*/_jsx(SignIn,{})})]});}//TODO we don't just want to sign in with Google, we want to have our own signup.\nfunction SignIn(){var signInWithGoogle=function signInWithGoogle(){var provider=new firebase.auth.GoogleAuthProvider();auth.signInWithPopup(provider);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"button\",{className:\"sign-in\",onClick:signInWithGoogle,children:\"Sign in with Google\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Do not violate the community guidelines or you will be banned for life!\"})]});}function SignOut(){return auth.currentUser&&/*#__PURE__*/_jsx(\"button\",{className:\"sign-out\",onClick:function onClick(){return auth.signOut();},children:\"Sign Out\"});}// Tips from here: https://edisondevadoss.medium.com/react-native-chat-using-firebase-d4c0ef1ab0b5 \nfunction PrivateChat(){var _auth$currentUser=auth.currentUser,uid=_auth$currentUser.uid,photoURL=_auth$currentUser.photoURL;// Merge two user IDs and create a new chat ID\nvar chatID=function chatID(){var uid1=uid;var uid2=uid;// TODO how to get other user's ID?\nvar chatIDpre=[];chatIDpre.push(uid1);chatIDpre.push(uid2);chatIDpre.sort();return chatIDpre.join('_');};var dummy=useRef();// for scrolling to bottom\n// Get messages\nvar messagesRef=firestore.collection('messages').doc(chatID.call()).collection('chat');var query=messagesRef.orderBy('createdAt');var _useCollectionData=useCollectionData(query,{idField:'id'}),_useCollectionData2=_slicedToArray(_useCollectionData,1),messages=_useCollectionData2[0];var _useState=useState(''),_useState2=_slicedToArray(_useState,2),formValue=_useState2[0],setFormValue=_useState2[1];// Send messages\nvar sendMessage=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.preventDefault();_context.next=3;return messagesRef.add({text:formValue,createdAt:firebase.firestore.FieldValue.serverTimestamp(),uid:uid,photoURL:photoURL});case 3:setFormValue('');dummy.current.scrollIntoView({behavior:'smooth'});//for scrolling to bottom\ncase 5:case\"end\":return _context.stop();}}},_callee);}));return function sendMessage(_x){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"main\",{children:[messages&&messages.map(function(msg){return/*#__PURE__*/_jsx(ChatMessage,{message:msg},msg.id);}),/*#__PURE__*/_jsx(\"span\",{ref:dummy})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:sendMessage,children:[/*#__PURE__*/_jsx(\"input\",{value:formValue,onChange:function onChange(e){return setFormValue(e.target.value);},placeholder:\"say something nice\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:!formValue,children:\"\\uD83D\\uDD4A\\uFE0F\"})]})]});}function GroupChatRoom(){var dummy=useRef();// for scrolling to bottom\nvar messagesRef=firestore.collection('messages').doc('group').collection('chat');var query=messagesRef.orderBy('createdAt').limit(25);var _useCollectionData3=useCollectionData(query,{idField:'id'}),_useCollectionData4=_slicedToArray(_useCollectionData3,1),messages=_useCollectionData4[0];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),formValue=_useState4[0],setFormValue=_useState4[1];var sendMessage=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e){var _auth$currentUser2,uid,photoURL;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:e.preventDefault();_auth$currentUser2=auth.currentUser,uid=_auth$currentUser2.uid,photoURL=_auth$currentUser2.photoURL;_context2.next=4;return messagesRef.add({text:formValue,createdAt:firebase.firestore.FieldValue.serverTimestamp(),uid:uid,photoURL:photoURL});case 4:setFormValue('');dummy.current.scrollIntoView({behavior:'smooth'});//for scrolling to bottom\ncase 6:case\"end\":return _context2.stop();}}},_callee2);}));return function sendMessage(_x2){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"main\",{children:[messages&&messages.map(function(msg){return/*#__PURE__*/_jsx(ChatMessage,{message:msg},msg.id);}),/*#__PURE__*/_jsx(\"span\",{ref:dummy})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:sendMessage,children:[/*#__PURE__*/_jsx(\"input\",{value:formValue,onChange:function onChange(e){return setFormValue(e.target.value);},placeholder:\"say something nice\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:!formValue,children:\"\\uD83D\\uDD4A\\uFE0F\"})]})]});}function ChatMessage(props){var _props$message=props.message,text=_props$message.text,uid=_props$message.uid,photoURL=_props$message.photoURL;// Here we set it up so we can apply different styling based on whether the message is sent or received\nvar messageClass=uid===auth.currentUser.uid?'sent':'received';return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"message \".concat(messageClass),children:[/*#__PURE__*/_jsx(\"img\",{src:photoURL||'https://api.adorable.io/avatars/23/abott@adorable.png'}),/*#__PURE__*/_jsx(\"p\",{children:text})]})});}export default App;/* Note: Also edited the \"Rules\" in Firebase like so:\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /{document=**} {\n      allow read, write: if\n          request.time < timestamp.date(2020, 12, 19);\n    }\n    \n    match /messages/{docId}{\n    \tallow read: if request.auth.uid != null;\n      allow create: if canCreateMessage();\n    }\n    \n    function canCreateMessage(){\n    \tlet isSignedIn = request.auth.uid != null;\n      let isOwner = request.auth.uid == request.resource.data.uid;\n      \n      return isSignedIn && isOwner;\n    }\n  }\n}\n*/","map":{"version":3,"sources":["/Users/kalina/Desktop/school/cs598kgk/chat-tutorial/src/App.js"],"names":["React","useRef","useState","firebase","useAuthState","useCollectionData","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","firestore","App","user","SignIn","signInWithGoogle","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","PrivateChat","uid","photoURL","chatID","uid1","uid2","chatIDpre","push","sort","join","dummy","messagesRef","collection","doc","call","query","orderBy","idField","messages","formValue","setFormValue","sendMessage","e","preventDefault","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","id","target","value","GroupChatRoom","limit","ChatMessage","props","message","messageClass"],"mappings":"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","sourcesContent":["// Based on tutorial at https://fireship.io/lessons/react-firebase-chat-app-tutorial/\n// The tutorial also includes filtering bad words and banning users for swearing, which is not included here.\n\nimport React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n    // This data is copied from adding a web app to Firebase, in the project settings\n    apiKey: \"AIzaSyBJhcglS9-i0liZophzKEToRMe8FiODIOk\",\n    authDomain: \"chat-tutorial-5692d.firebaseapp.com\",\n    databaseURL: \"https://chat-tutorial-5692d.firebaseio.com\",\n    projectId: \"chat-tutorial-5692d\",\n    storageBucket: \"chat-tutorial-5692d.appspot.com\",\n    messagingSenderId: \"441905797006\",\n    appId: \"1:441905797006:web:274684d28efcc58c8336df\"\n\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>⚛️🔥💬</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <GroupChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\n//TODO we don't just want to sign in with Google, we want to have our own signup.\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\n      <p>Do not violate the community guidelines or you will be banned for life!</p>\n    </>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\n\n// Tips from here: https://edisondevadoss.medium.com/react-native-chat-using-firebase-d4c0ef1ab0b5 \nfunction PrivateChat() {\n\n    const { uid, photoURL } = auth.currentUser;\n    \n    // Merge two user IDs and create a new chat ID\n    const chatID = () => {\n        const uid1 = uid; \n        const uid2 = uid; // TODO how to get other user's ID?\n        const chatIDpre = [];\n        chatIDpre.push(uid1);\n        chatIDpre.push(uid2);\n        chatIDpre.sort();\n        return chatIDpre.join('_');\n    };\n    \n    const dummy = useRef(); // for scrolling to bottom\n    \n    // Get messages\n    const messagesRef = firestore.collection('messages').doc(chatID.call()).collection('chat');\n    const query = messagesRef.orderBy('createdAt');\n    const [messages] = useCollectionData(query, { idField: 'id' });\n\n    const [formValue, setFormValue] = useState('');\n    \n    // Send messages\n    const sendMessage = async (e) => {\n        e.preventDefault();\n\n        await messagesRef.add({\n          text: formValue,\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n          uid,\n          photoURL\n        })\n\n        setFormValue('');\n        dummy.current.scrollIntoView({ behavior: 'smooth' }); //for scrolling to bottom\n    }\n  \n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      {/*Adding this empty dummy makes it so it scrolls to the bottom when there are new messages -->*/}\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n      <button type=\"submit\" disabled={!formValue}>🕊️</button>\n\n    </form>\n  </>)\n}\n\nfunction GroupChatRoom() {\n\n  const dummy = useRef(); // for scrolling to bottom\n  const messagesRef = firestore.collection('messages').doc('group').collection('chat');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' }); //for scrolling to bottom\n  }\n  \n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      {/*Adding this empty dummy makes it so it scrolls to the bottom when there are new messages -->*/}\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n      <button type=\"submit\" disabled={!formValue}>🕊️</button>\n\n    </form>\n  </>)\n}\n\n\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  // Here we set it up so we can apply different styling based on whether the message is sent or received\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\n\nexport default App;\n\n/* Note: Also edited the \"Rules\" in Firebase like so:\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /{document=**} {\n      allow read, write: if\n          request.time < timestamp.date(2020, 12, 19);\n    }\n    \n    match /messages/{docId}{\n    \tallow read: if request.auth.uid != null;\n      allow create: if canCreateMessage();\n    }\n    \n    function canCreateMessage(){\n    \tlet isSignedIn = request.auth.uid != null;\n      let isOwner = request.auth.uid == request.resource.data.uid;\n      \n      return isSignedIn && isOwner;\n    }\n  }\n}\n*/"]},"metadata":{},"sourceType":"module"}